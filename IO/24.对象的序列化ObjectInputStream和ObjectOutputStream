/*

ObjectInputStream

ObjectOutputStream

被静态修饰的成员变量是不会被序列化的。

transient:可以让成员变量不被序列化。

Java对象序列化
　　当两个进程在进行远程通信时，彼此可以发送各种类型的数据。无论是何种类型的数据，都会以二进制序列的形式在网络上传送。发送方需要把这个Java对象转换为字节序列，才能在网络上传送；接收方则需要把字节序列再恢复为Java对象。

　　只能将支持 java.io.Serializable 接口的对象写入流中。每个 serializable 对象的类都被编码，编码内容包括类名和类签名、对象的字段值和数组值，以及从初始对象中引用的其他所有对象的闭包。

1.概念

　　序列化：把Java对象转换为字节序列的过程。
　　反序列化：把字节序列恢复为Java对象的过程。

2.用途

　　对象的序列化主要有两种用途：
　　1） 把对象的字节序列永久地保存到硬盘上，通常存放在一个文件中；
　　2） 在网络上传送对象的字节序列。

3.对象序列化

3.1序列化API

　　java.io.ObjectOutputStream代表对象输出流，它的writeObject(Object obj)方法可对参数指定的obj对象进行序列化，把得到的字节序列写到一个目标输出流中。只有实现了Serializable和Externalizable接口的类的对象才能被序列化。

　　java.io.ObjectInputStream代表对象输入流，它的readObject()方法从一个源输入流中读取字节序列，再把它们反序列化为一个对象，并将其返回。
 */


class ObjectStream 
{
	public static void main(String[] args) throws IOException,ClassNotFoundException
	{
		writeObj();

		readObj();
	}

	public static void readObj()throws IOException,ClassNotFoundException
	{
		ObjectInputStream ois = new ObjectInputStream(new FileInputStream("obj.txt"));

		Student stu = (Student)ois.readObject();
		Student stu1 = (Student)ois.readObject();

		System.out.println(stu.getName()+"::"+stu.getAge());
		System.out.println(stu1.getName()+"::"+stu1.getAge());

		ois.close();
	}

	public static void writeObj()throws IOException
	{
		ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("obj.txt"));

		Student stu = new Student("lisi",99);
		Student stu1 = new Student("wangwu",49);

		oos.writeObject(stu);
		oos.writeObject(stu1);

		oos.close();
	}
}

class Student implements Serializable
{
	private /*static*/  String name;
	private /*transient*/ int age;
	//private transient  int pay;
	//public static final long serialVersionUID = 42L;

	Student (String name,int age)
	{
		this.name = name;
		this.age = age;
	}
	public String getName()    
	{
		return   name;
	}
	public int getAge()
	{
		return age;
	}
}
